<?php

use OpenExam\Library\Security\Roles;
use OpenExam\Models\Exam;
use OpenExam\Models\Student;
use Phalcon\Tag;

/*
 * Copyright (C) 2014-2018 The OpenExam Project
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

// 
// File:    correction.phtml
// 
// Author:  Ahsan Shahzad (Medfarm DoIT)
// Author:  Anders LÃ¶vgren (Nowise Systems)
// 

$overallQuestScore = array();
$totalStudentScore = 0;

$studentIds = array_keys($answers);

$grades = $exam->getGrade();

$examGrades = $grades->getGrades();
$avgGrades = array_fill_keys(array_keys($examGrades), 0);

arsort($examGrades);

if (($exam->details & Exam::SHOW_SUMMARY_DURING_CORRECTION) != 0) {
        $exam->show_percent = true;
}
if (($exam->details & Exam::SHOW_CODE_DURING_CORRECTION) != 0) {
        $exam->show_code = true;
}

if ($exam->decoded ||
    $exam->enquiry ||
    $this->user->acquire(array(Roles::DECODER, Roles::CREATOR), $exam->id)) {
        $exam->show_grades = true;
        $exam->show_percent = true;
}
if ($this->user->acquire(array(Roles::CREATOR), $exam->id)) {
        $exam->show_student_enquiry = true;
} else {
        $exam->show_student_enquiry = false;
}

if ($this->user->acquire(array(Roles::DECODER, Roles::CREATOR), $exam->id)) {
        $exam->show_download = true;
} else {
        $exam->show_download = false;
}

if ($exam->decoded == false &&
    $this->user->roles->acquire(Roles::DECODER, $exam->id) &&
    $exam->getState()->isCorrected()) {
        $exam->show_decode = true;
} else {
        $exam->show_decode = false;
}

if ($exam->decoded &&
    $exam->getState()->isCorrected() == false) {
        $exam->show_download = false;
        $exam->show_decode = false;
        $exam->decoded = false;
        $exam->show_missmatch = true;
}

if (strtotime($exam->endtime) < time()) {
        $exam->show_save = true;
} else {
        $exam->show_save = false;
}

// 
// Use config defaults for undefined display options:
// 
if (!isset($exam->show_summary)) {
        $exam->show_summary = $this->config->result->show->summary;
}
if (!isset($exam->show_percent)) {
        $exam->show_percent = $this->config->result->show->scores;
}
if (!isset($exam->show_grades)) {
        $exam->show_grades = $this->config->result->show->grades;
}
if (!isset($exam->show_code)) {
        $exam->show_code = $this->config->result->show->code;
}

// 
// Don't display separate column with code if already decoded:
// 
if ($exam->decoded | $exam->enquiry) {
        $exam->show_code = false;
        $exam->show_user = true;
} else {
        $exam->show_user = false;
}

if (!$exam->show_save) {
        $header = array(
                'head' => "Exam status",
                'text' => "Following table shows all answers from students to questions for the examination <strong>\"%s\"</strong>",
                'note' => "You can view the student's answers by student (rows), by question (column) or individual (by index). This exam is not yet finished, so you can only monitor the answering progress for students on this exam."
        );
} elseif ($exam->enquiry) {
        $header = array(
                'head' => "Exam investigation",
                'text' => "Following table shows the final result of all students for the examination <strong>\"%s\"</strong>",
                'note' => "You can view the student's answers by student (rows), by question (column) or individual (by index). This exam is in enquiry state (correction has finished, but decoding is on hold). In this phase its no longer possible to change student results."
        );
} elseif ($exam->decoded) {
        $header = array(
                'head' => "Exam score board",
                'text' => "Following table shows the final result of all students for the examination <strong>\"%s\"</strong>",
                'note' => "You can view the student's answers by student (rows), by question (column) or individual (by index). This exam has been decoded, so it's no longer possible to change student results."
        );
} else {
        $header = array(
                'head' => "Exam correction",
                'text' => "Following table shows all answers from students to questions for the examination <strong>\"%s\"</strong>",
                'note' => "Correct answers by student (rows), by question (column) or individual (by index). You can only correct answers for questions published by yourself or those you have been assigned the role as corrector for."
        );
}

if ($exam->decoded || $exam->enquiry) {
        $exam->show_zipfile = true;
} else {
        $exam->show_zipfile = false;
}

?>

<?= Tag::stylesheetLink('css/opentip.css?ver=2.4.6'); ?>

<?= Tag::javascriptInclude('js/opentip-jquery.min.js?ver=2.4.6'); ?>
<?= Tag::javascriptInclude('js/opentip-style.js?rev=1'); ?>

<style>
    #scoreboard-wrapper {
        overflow: no-display;
    }
    #progressbar {
        margin-top: 20px;
    }
    .progress-label {
        font-weight: bold;
        text-shadow: 1px 1px 0 #fff;
    }
    .sortme {
        cursor:pointer !important;
    }
    table {
        border-collapse: inherit;
        border-spacing: 2px;
    }
    td.ac {
        background-color: #ffffff !important;
        border: 1px solid #cccccc !important;
        color: #cccccc !important;
    }
    td.no {
        background-color: #dddddd !important;
        border: 1px solid #999999 !important;
        color:#606060 !important;
    }
    td.na {
        background-color: #e98e8d !important;
        border: 1px solid #d96661 !important;
        color: #ac4142 !important;
    }
    td.nc {
        background-color: #a2fdb1 !important;
        border: 1px solid #65d02c !important;
        color: #41612c !important;
    }
    td.gm {
        background-color: #4285f4 !important;
        border: 1px solid #dddddd !important;
        color: #ffffff !important;
    }
    td.cc {
        text-align: center;
        width: 25px;
    }
    td.cc a {
        color: inherit;
    }
    td.ac a {
        color: #c1002b;
    }
    td.grade {
        font-weight: bold;        
        text-align: center;
        white-space: nowrap;
    }
    td.gru {
        border-bottom: 1px #dedede solid;
        background-color: #ff6b4f;
        color: #ffffcc;
    }
    td.grp, td.grh {
        border-bottom: 1px #dedede solid;
        background-color: #8bc540;
        color: #41612c;        
    }
    td.grc {
        border-bottom: 1px #dedede solid;
        background-color: #4285f4;
        color: #ffffcc;
    }
    td.descr {
        padding-left: 5px;
    }
    td a.fill, th a.fill {
        display: block;
        width: 100%;
    }
    /**
     * Fixed first column:
     */
    #table-wrapper-top-scroll {
        overflow-x: scroll;
        overflow-y: visible;
        width: calc(100% - 190px);
        margin-left: 188px;
    }    
    #table-wrapper { 
        overflow-x:scroll;
        overflow-y:visible;
        width:calc(100% - 190px);
        margin-left: 188px;
    }
    #table-wrapper td, 
    #table-wrapper th {
        padding: 5px 20px;
        width: 190px;
        text-align: center;  
        white-space: nowrap;
    }
    #table-wrapper th:first-child,
    #table-wrapper td:first-child {
        position: absolute;
        left: 15px;
        text-align: left;
    }
    #table-wrapper th {
        background-color: #eaeaea;
    }
    #table-wrapper tr.enquiry td.student,
    #table-wrapper tr.enquiry td.student a {
        background-color: yellow;
        color: black;
    }
    #table-wrapper td.student {
        border-bottom:1px #dedede solid; 
        border-right:5px solid #dddddd; 
        background-color:#ffffff;
        white-space: nowrap;
    }
    #table-wrapper td.student a.icon {
        padding-right: 5px;
    }
    #table-wrapper td.grade {
    }
    #table-wrapper td.score {
    }
    #table-wrapper td.percent {
        border-bottom:1px #dedede solid; 
        background-color:#ffffcc;
    }
    @media screen and (max-width: 40.5em) {
        #table-wrapper,
        #table-wrapper-top-scroll {
            width: calc(100% - 100px);
            margin-left: 98px;
        }
        #table-wrapper td, #table-wrapper th {
            padding: 5px 5px;
            width: 100px;
        }
        #table-wrapper a span.student {
            display: none;
        }
    }

    @media screen and (max-width: 25em) {
        #table-wrapper,
        #table-wrapper-top-scroll {
            width: calc(100% - 60px);
            margin-left: 58px;
        }
        #table-wrapper td, #table-wrapper th {
            padding: 5px 5px;
            width: 60px;
        }
        #table-wrapper th:first-child {
            color: transparent;
        }
    }
</style>

<!-- Main area -->
<div id="mainview">

    <h1 class="page">
        <?= $header['head'] ?>
        <div class="tool-icons">
            <?php if ($exam->show_decode): ?>
                    <a href="#" id="decode-exam" class="prevent" title="Run wizard for enquiry or decoding this exam.">
                        <i class="fa fa-check-circle" style="float:right;padding:3px"></i>
                    </a> 
            <?php endif; ?>

            <?php if ($exam->show_download): ?>
                    <a href="#" id="download-scoreboard" class="prevent" title="Download score board in spreadsheet format">
                        <i class="fa fa-file-excel-o" style="float:right;padding:3px"></i>
                    </a> 
            <?php endif; ?>

            <?php if ($exam->show_zipfile): ?>
                    <a href="#" id="render-results" title="Open dialog for downloading all or selected students as zip-file">
                        <i class="fa fa-file-pdf-o" style="float:right;padding:3px"></i>
                    </a> 
            <?php endif; ?>
        </div>            
    </h1>
    <p><?= sprintf($header['text'], $exam->name); ?></p>
    <div class="alert alert-info alert-dismissable">
        <a href="#" class="close" data-dismiss="alert" aria-label="close">&times;</a>
        <?= $header['note'] ?>
    </div>

    <div id="scoreboard-wrapper">
        <div id="table-wrapper-top-scroll">
            <div>&nbsp;</div>
        </div>
        <div id="table-wrapper">
            <table>
                <thead>
                    <tr>
                        <?php foreach ($questions as $question): ?>
                                <?php
                                $href = $this->url->get('exam/' . $exam->id . '/correction/question/' . $question->id);
                                $desc = "Correctors: ";

                                $correctors = array();
                                foreach ($question->correctors as $corrector) {
                                        $correctors[] = $corrector->name;
                                }
                                $desc .= implode(", ", $correctors);

                                ?>
                                <th>
                                    <a data-fancybox="ajax" 
                                       data-caption="<?= $exam->name ?>"
                                       data-src="<?= $href ?>" 
                                       data-type="ajax" 
                                       href="javascript:;"
                                       title="<?= $desc ?>"
                                       class="fill">
                                        Q<?= $question->slot ?><br>Max. <?= floatval($question->score) ?>
                                    </a>
                                </th>
                        <?php endforeach; ?>

                        <th>
                            Student
                        </th>
                        <?php if ($exam->show_code): ?>
                                <th>
                                    Code
                                </th>
                        <?php endif; ?>
                        <?php if ($exam->show_user): ?>
                                <th>
                                    F. name
                                </th>
                                <th>
                                    L. name
                                </th>
                                <th>
                                    P No.
                                </th>
                        <?php endif; ?>
                        <?php if ($exam->show_percent): ?>
                                <th>
                                    Total score
                                    <div class="total-score">Max. <?= floatval($grades->getMaximum()) ?></div>
                                </th> 
                                <th>
                                    %
                                </th>
                        <?php endif; ?>
                        <?php if ($exam->show_grades): ?>
                                <th>
                                    Grade
                                </th>
                        <?php endif; ?>
                    </tr>
                </thead>	
                <tbody>
                    <?php foreach ($students as $student): ?>
                            <?php
                            if (!isset($answers[$student->id])) {
                                    continue;
                            }

                            ?>
                            <tr class="<?= $student->enquiry ? 'enquiry' : '' ?>" data-id="<?= $student->id ?>">
                                <?php $totalStudentScore = 0; ?>
                                <?php
                                foreach ($questions as $question):

                                        $result = null;
                                        $qScore = 0;

                                        $answer = $answers[$student->id][$question->id];

                                        if ($answer) {

                                                if (isset($results[$answer->id])) {
                                                        $result = $results[$answer->id];

                                                        // 
                                                        // Fixes for invalid JSON score data:
                                                        // 
                                                        if ($result->score[0] == '{') {
                                                                if ($result->score == '{}') {
                                                                        $result->score = '{"a":0}';
                                                                        $result->save();
                                                                }
                                                                if (!($scores = json_decode($result->score, true))) {
                                                                        $result->score = '{"a":0}';
                                                                        $result->save();
                                                                }
                                                                if (!($scores = json_decode($result->score, true))) {
                                                                        die("Failed decode JSON data");
                                                                }
                                                        }

                                                        if (is_array($scores)) {
                                                                foreach ($scores as $part => $score) {
                                                                        $qScore += $score;
                                                                }
                                                        }

                                                        if ($qScore < 0) {
                                                                $qScore = 0;
                                                        }

                                                        $totalStudentScore += $qScore;
                                                        $overallQuestScore[$question->id][] = $qScore;
                                                }
                                        }

                                        $qCorrectorList = array();
                                        foreach ($question->getCorrectors() as $qCorrector) {
                                                $qCorrectorList[] = $qCorrector->user;
                                        }

                                        ?>

                                        <?php
                                        // 
                                        // Find color code:
                                        // 
                                        $cLink = true;
                                        if (!$answer) {
                                                $cc = 'na';
                                                $cLink = false;
                                        } elseif (!$answer->answered) {
                                                $cc = 'na';
                                                $cLink = false;
                                        } elseif (isset($result) && in_array($result->correction, array('completed', 'finalized'))) {
                                                $cc = 'ac';
                                        } elseif (!in_array($this->user->getPrincipalName(), $qCorrectorList)) {
                                                $cc = 'no';
                                        } else {
                                                $cc = 'nc';
                                        }

                                        ?>
                                        <td class="score cc <?= $cc ?>">
                                            <?php if ($cLink): ?>
                                                    <a data-fancybox="ajax" 
                                                       data-caption="<?= $exam->name ?>"
                                                       data-src="<?= $this->url->get('exam/' . $exam->id . '/correction/answer/' . $answer->id) ?>" 
                                                       data-type="ajax" 
                                                       href="javascript:;" 
                                                       ans-id="<?= $answer->id ?>"
                                                       class="fill">
                                                           <?= (isset($result) ? $qScore : '<i class="fa fa-check-square-o"></i>') ?>
                                                    </a>
                                            <?php else: ?>
                                                    <i class="fa fa-ban"></i>
                                            <?php endif; ?>
                                        </td>

                                <?php endforeach; ?>
                                <td class="student">
                                    <?php if ($exam->show_user): ?>
                                            <a class="icon render-student prevent"
                                               title="Download student result in PDF-file format" 
                                               href="#"
                                               data-user="<?= $student->user ?>">
                                                <i class="fa fa-file-pdf-o"></i>
                                            </a>    
                                    <?php endif; ?> 
                                    <?php if ($exam->show_student_enquiry): ?>
                                            <a class="icon toggle-enquiry-student prevent"
                                               title="Toggle enquiry flag on this student" 
                                               href="#">
                                                <i class="fa fa-ban" aria-hidden="true"></i>
                                            </a>    
                                    <?php endif; ?> 
                                    <a class="icon"
                                       data-fancybox="ajax" 
                                       data-caption="<?= $exam->name ?>"
                                       data-src="<?= $this->url->get('exam/' . $exam->id . '/correction/student/' . $student->id) ?>" 
                                       data-type="ajax" 
                                       href="javascript:;" 
                                       stud-id="<?= $student->id ?>">
                                        <i class="fa fa-graduation-cap"></i>
                                        <span class="student">
                                            <?= $exam->show_user ? $student->code : Student . '(' . $student->id . ')' ?>
                                        </span>
                                    </a>
                                </td>
                                <?php if ($exam->show_code): ?>
                                        <td class="student">
                                            <?= $student->code ?>
                                        </td>
                                <?php endif; ?>
                                <?php if ($exam->show_user): ?>
                                        <td class="student">
                                            <?= $student->fname ?>
                                        </td>
                                        <td class="student">
                                            <?= $student->lname ?>
                                        </td>
                                        <td class="student">
                                            <?= substr(substr_replace($student->persnr, "-", 8, 0), 2); ?>
                                        </td>
                                <?php endif; ?>
                                <?php if ($exam->show_percent): ?>
                                        <td class="percent">
                                            <?= $totalStudentScore ?>
                                        </td>
                                        <td class="percent">
                                            <?= sprintf("%1.1f", $grades->getNormalized($totalStudentScore)) ?>%
                                            <?php
                                            if ($answer) {
                                                    $avgScore[] = $totalStudentScore;
                                                    $avgPercentage[] = floatval($grades->getNormalized($totalStudentScore));
                                            }

                                            ?>
                                        </td>
                                <?php endif ?>
                                <?php if ($exam->show_grades): ?>
                                        <?php
                                        $close = $grades->isClose($totalStudentScore);
                                        $grade = $grades->getGrade($totalStudentScore);
                                        $avgGrades[$grade] ++;

                                        if ($close) {
                                                $color = "grc";
                                        } elseif ($grades->isLowest($grade)) {
                                                $color = "gru";
                                        } elseif ($grades->isHighest($grade)) {
                                                $color = "grh";
                                        } else {
                                                $color = "grp";
                                        }

                                        ?>
                                        <td class="grade cc <?= $color ?>">
                                            <?= $grade ?>
                                            <?php if ($close) : ?>
                                                    <?= "(+" . floatval($grades->getMissing($totalStudentScore)) . "p -> " . $grades->getNextGrade($grade) . ")" ?>
                                            <?php endif; ?>
                                        </td>
                                <?php endif; ?>
                            </tr>
                    <?php endforeach; ?>
                </tbody>	
                <?php if ($exam->show_summary): ?>
                        <tfoot>
                            <tr class="avarage">
                                <?php foreach ($questions as $question): ?>
                                        <?php
                                        // 
                                        // Avarage:
                                        // 
                                        if (isset($overallQuestScore[$question->id])) {
                                                $sumScores = array_sum($overallQuestScore[$question->id]);
                                                $numScores = count($overallQuestScore[$question->id]);
                                        } else {
                                                $numScores = 0;
                                        }

                                        // 
                                        // Fixup for division by zero warning:
                                        // 
                                        if ($numScores == 0) {
                                                $sumScores = 0;
                                                $numScores = 1;
                                        }
                                        $avgScores = floatval($sumScores / $numScores);

                                        // 
                                        // Tooltip:
                                        // 
                                        $ansCount = count($overallQuestScore[$question->id]);

                                        // 
                                        // Load correction status HTML fragment:
                                        // 
                                        $this->partial("partials/question-info", array(
                                                'question'  => $question,
                                                'corrected' => $ansCount,
                                                'percent'   => $question->score == 0 ? 0 : sprintf("%.02d", ($avgScores / $question->score) * 100),
                                                'avarage'   => $avgScores
                                            )
                                        );

                                        ?>
                                <?php endforeach; ?>

                                <th  class="cc aa" align="right" style="vertical-align:top;">Average:</th>
                                <?php if ($exam->show_code): ?>
                                        <th align="right" style="vertical-align:top;"></th>
                                <?php endif; ?>
                                <?php if ($exam->show_user): ?>
                                        <th align="right" style="vertical-align:top;"></th>
                                        <th align="right" style="vertical-align:top;"></th>
                                        <th align="right" style="vertical-align:top;"></th>
                                <?php endif; ?>
                                <?php if ($exam->show_percent): ?>
                                        <td class="cc aa">
                                            <?php if (is_array($avgScore)) : ?>
                                                    <?= floatval(array_sum($avgScore) / count($avgScore)) ?> (<?= floatval($grades->getMaximum()) ?>)
                                            <?php endif; ?>
                                        </td>
                                        <td class="cc aa">
                                            <?php if (is_array($avgPercentage)) : ?>
                                                    <?= sprintf("%1.1f", array_sum($avgPercentage) / count($avgPercentage)) ?>%
                                            <?php endif; ?>
                                        </td>
                                <?php endif; ?>
                                <?php if ($exam->show_grades): ?>
                                        <td class="cc aa" style="text-align:right; margin:0; padding:0">
                                            <?php foreach ($examGrades as $grade => $limit): ?>
                                                    <div style="padding:1px; "><b><?= $grade ?></b>: <?= $avgGrades[$grade] ?></div>
                                            <?php endforeach; ?>
                                        </td>
                                <?php endif; ?>
                            </tr>
                        </tfoot>
                <?php endif; ?>
            </table>
        </div>
    </div>  
    <br>

    <h4>Color codes used in the score board:</h4>
    <table style="margin:0">
        <tbody>
            <tr class="colorcode">
                <td class="cc ac">&nbsp;</td>
                <td class="descr">Answer has been corrected.</td>
            </tr>
            <?php if (!$exam->decoded && $this->user->getPrincipalName() == $exam->creator): ?>
                    <tr class="colorcode">
                        <td class="cc no">&nbsp;</td>
                        <td class="descr">This answer should be corrected by another person.</td>
                    </tr>
            <?php endif; ?>                                        
            <tr class="colorcode">
                <td class="cc na">&nbsp;</td>
                <td class="descr">No answer was given for this question.</td>
            </tr>
            <tr class="colorcode">
                <td class="cc nc">&nbsp;</td>
                <td class="descr">The answer is uncorrected or partially corrected.</td>
            </tr>
            <tr class="colorcode">
                <td class="cc gm">&nbsp;</td>
                <td class="descr">Student can pass with some grace marks.</td>
            </tr>
        </tbody>
    </table>
</div>

<!-------------- Hidden Divs --------------->
<div id="exam-decode-box" title="Exam decode wizard" style="display: none"></div>

<div id="render-student-result" style="display:none" title="Download exam result" ></div>    
<div id="render-decoder-result" style="display:none" title="Download exam result" ></div>    

<?php
// 
// Question is currently first in table. Calculate number of columns last in
// table containing meta data (code, name, grade, ...).
// 

$colReorderCount = 1;           // Only student ID

if ($exam->show_percent) {
        $colReorderCount += 2;
}
if ($exam->show_grades) {
        $colReorderCount += 1;
}
if ($exam->show_code) {
        $colReorderCount += 1;
}
if ($exam->show_user) {
        $colReorderCount = 7;
}

?>

<script>
        var examId = <?= $exam->id ?>;
        var stIds = <?= json_encode($studentIds) ?>;
        var completedRequests = {};
        var resyncableResults = [];

        $(document).ready(function () {
            // 
            // Keep column order:
            // 
            jQuery.each($('#scoreboard-wrapper').find('table').find('tr'), function () {
                if (($(this).children().length)) {
                    for (i = 0; i <<?= $colReorderCount ?>; i++) {
                        $(this).children(":first").before($(this).children(":last"));
                    }
                } else {
                    $(this).remove();
                }
            });

            $("#table-wrapper-top-scroll").scroll(function () {
                $("#table-wrapper")
                        .scrollLeft($("#table-wrapper-top-scroll").scrollLeft());
            });
            $("#table-wrapper").scroll(function () {
                $("#table-wrapper-top-scroll")
                        .scrollLeft($("#table-wrapper").scrollLeft());
            });
            $(window).resize(function () {
                $("#table-wrapper-top-scroll > div").width($("#table-wrapper > table").width());
            });

            $(window).resize();

            // 
            // Attach fancybox on anchors:
            // 
            $('a[data-fancybox]').fancybox({
                width: "100%",
                height: "95%",
                autoSize: true,
                toolbar: true,
                smallBtn: false,
                helpers: {
                    overlay: {
                        closeClick: false
                    }
                },
                afterClose: function () {
                    resyncableResults = [];
                }
            });

            $(".q-info-btn").each(function (index, element) {
                new Opentip(
                        element,
                        $(this).parent().children('div').html(),
                        {style: "drops", tipJoint: "top left", showOn: "click"}
                );
            });

            if (oe_module_loaded("question-correction")) {
                return;
            }

            $(document).on('click', '#reset-student-results', function () {
                resetStudentResults();
                return false;
            });

            $(document).on('click', '.save-result', function () {
                var tmp = [];
                tmp.push($(this).attr('ans-id'));
                saveResults(tmp);
            });

            $(document).on('click', '.render-student', function () {
                var user = $(this).attr('data-user');
                $.ajax({
                    type: "POST",
                    data: {type: 'result', user: user},
                    url: baseURL + 'utility/render/student/' + examId,
                    success: function (content) {
                        showDialogWindow("#render-student-result", content);
                    },
                    error: function (content) {
                        showDialogWindow("#render-student-result", content.responseText);
                    }
                });
            });

            $(document).on('click', '#render-results', function () {
                $.ajax({
                    type: "POST",
                    data: {type: 'result'},
                    url: baseURL + 'utility/render/decoder/' + examId,
                    success: function (content) {
                        showDialogWindow("#render-decoder-result", content);
                    },
                    error: function (content) {
                        showDialogWindow("#render-decoder-result", content.responseText);
                    }
                });
            });

            $(document).on('click', '#decode-exam', function () {
                $.ajax({
                    type: "GET",
                    url: baseURL + 'exam/decode/' + examId,
                    success: function (content) {
                        showDialogWindow("#exam-decode-box", content);
                    },
                    error: function (content) {
                        showDialogWindow("#exam-decode-box", content.responseText);
                    }
                });
            });

            $(document).on('click', '.toggle-enquiry-student', function () {
                var student = $(this).closest('tr');
                var enquiry = student.hasClass("enquiry") === false;

                ajax(
                        baseURL + 'ajax/core/creator/student/update',
                        JSON.stringify({
                            id: student.attr('data-id'),
                            enquiry: enquiry ? 1 : false
                        }),
                        function () {
                            if (enquiry) {
                                student.addClass("enquiry");
                            } else {
                                student.removeClass("enquiry");
                            }
                        });
            });

            $(document).on('change', '.hide-completed', function () {
                var checked = $(this).is(':checked');
                $('div[correction]').each(function () {
                    if ($(this).attr('correction') === 'completed') {
                        if (checked) {
                            $(this).hide(500);
                        } else {
                            $(this).show(500);
                        }
                    }
                });
            });

            $(document).on('change', '.hide-resources', function () {
                $('div.q-part-resources').each(function () {
                    $(this).toggle(500);
                });
            });

            $(document).on('change', '.hide-uncorrectable', function () {
                $('div.correction-section-box[corrector="0"]').each(function () {
                    $(this).toggle(500);
                });
            });

            $(document).on('change', '.changeable', function () {
                if (resyncableResults.indexOf($(this).attr('ans-id')) < 0) {
                    resyncableResults.push($(this).attr('ans-id'));
                }
            });

            $(document).on('click', '.save-all-result', function () {
                // 
                // Save result with values, but not yet saved by default. Give
                // caller an option to force save all result.
                // 
                if (resyncableResults.length === 0) {
                    resyncableResults = getSyncableResults('unsaved');
                }

                if (resyncableResults.length === 0) {
                    if (confirm('No result need to be saved. Save anyway?')) {
                        resyncableResults = getSyncableResults('complete');
                    } else {
                        return false;
                    }
                }

                saveResults(resyncableResults);
                resyncableResults = [];
            });

            $(document).on('focus', '.q-points', function () {
                $(this).attr('reset', $(this).val());
            });

            $(document).on('blur', '.q-points', function () {
                if (isNaN($(this).val().parsefloat()) === false) {
                    $(this).val($(this).val().parsefloat().floatval()); // localize
                }

                if ($(this).val() !== '' && !$.isNumeric($(this).val().parsefloat())) {
                    alert("Error: Question points must be numeric (" + $(this).val() + " is not accepted)");
                    $(this).val($(this).attr('reset'));
                    return false;
                }

                if ($(this).val().parsefloat() > $(this).attr('max-pt').parsefloat()) {
                    alert("Error: Maximum points for this part are: " + $(this).attr('max-pt'));
                    $(this).val($(this).attr('reset'));
                    return false;
                }

            });

            $(document).on('click', '#download-scoreboard', function () {

                var source = $('#scoreboard-wrapper').find('table').clone();
                $(source).find("a").contents().unwrap();
                $(source).find(".adjustable").css('width', '150px');
                $(source).find(".cc").css('width', '80px');
                $.ajax({
                    type: "POST",
                    url: baseURL + 'result/export/' + examId,
                    data: {score_board: '<table border="1">' + $(source).html() + '</table>'}
                })
                        .done(function (resp) {
                            if (resp === 'exported') {
                                location.href = baseURL + 'result/export/' + examId + "/1";
                            }
                        });

            });

            $('#containerflarp').css('width', '92%');

            // 
            // Get syncable results. The mode defines which ans-id to return:
            // changed  - Return only manual changed results.
            // unsaved  - Return all not yet saved results.
            // complete - Return all results excluding any unset.
            // 
            var getSyncableResults = function (mode) {
                if (mode === 'changed') {
                    return resyncableResults;
                } else if (mode === 'unsaved') {
                    $('.q-points').each(function () {
                        if (resyncableResults.indexOf($(this).attr('ans-id')) < 0) {
                            if (Number($(this).attr('res-id')) === 0) {
                                if ($(this).val() !== '' || $(this).val() !== 0) {
                                    resyncableResults.push($(this).attr('ans-id'));
                                }
                            }
                        }
                    });
                    return resyncableResults;
                } else if (mode === 'complete') {
                    $('.q-points').each(function () {
                        if (resyncableResults.indexOf($(this).attr('ans-id')) < 0) {
                            if ($(this).val() !== '') {
                                resyncableResults.push($(this).attr('ans-id'));
                            }
                        }
                    });
                    return resyncableResults;
                } else {
                    console.log('Unknown resyncable result mode requested: ' + mode);
                    return [];
                }
            };

            // 
            // Get results that can be reset.
            // 
            var getChangableResults = function () {
                var results = [];

                $(".q-points.changeable").each(function (index, item) {
                    var result = Number($(item).attr('res-id'));
                    if (results.indexOf(result) === -1 && result !== 0) {
                        results.push(result);
                    }
                });

                return results;
            };

            // 
            // Reset all results.
            // 
            var resetStudentResults = function () {
                var results = getChangableResults();

                if (results.length === 0) {
                    return false;
                }

                var msg = "Clicking OK will reset the " + results.length + " results found on this page in the database. This view will then reload and you will need to fill them in again. \r\n Are you sure you want to reset these results?";

                if (confirm(msg)) {
                    ajax(
                            baseURL + 'ajax/core/corrector/result/delete',
                            JSON.stringify(results),
                            function (response) {
                                location.reload();
                            }
                    );
                }
            };

            // 
            // Save results to database.
            // 
            var saveResults = function (ansIds) {
                var resultsCreate = [];
                var resultsUpdate = [];
                var totalCreated = 0;

                ansIds = ansIds.filter(function (aid) {
                    if (typeof (aid) === 'string') {
                        aid = parseInt(aid);
                    }
                    if (aid === undefined || typeof (aid) !== 'number' || isNaN(aid)) {
                        return false;
                    } else {
                        return aid !== 0;
                    }
                });

                $.each(ansIds, function (i, ansId) {
                    var saveResultBtn = $(".save-result[ans-id='" + ansId + "']");
                    var correctorComents = $(saveResultBtn).parent().parent().find('textarea').val();
                    var correctorId = parseInt($(saveResultBtn).attr('corrector-id'));
                    var resultJson = {};
                    var resId = 0, ansId = 0, qstId = 0;
                    var correctionStatus = 'completed';

                    $(saveResultBtn).closest('.q-body').find('.q-points').each(function (index, element) {
                        if (resId === 0 && ansId === 0 && qstId === 0) {
                            qstId = parseInt($(element).attr('qst-id'));
                            ansId = parseInt($(element).attr('ans-id'));
                            resId = parseInt($(element).attr('res-id'));
                        }
                        if (isNaN(resId)) {
                            resId = 0;
                        }

                        if ($(element).attr('max-pt').parsefloat() === 0) {
                            resultJson[$(element).attr('q-part')] = 0;
                        } else if ($(element).val().length > 0) {
                            resultJson[$(element).attr('q-part')] = $(element).val().parsefloat();
                        } else {
                            correctionStatus = 'partial';
                        }
                    });

                    // 
                    // This code is knwon to have caused problem by inserting empty scores ({}).
                    // 
                    var stringJson = JSON.stringify(resultJson);

                    if (stringJson !== '{}') {
                        if (resId !== 0) {
                            resultsUpdate.push({
                                id: resId,
                                question_id: qstId,
                                answer_id: ansId,
                                score: stringJson,
                                comment: correctorComents,
                                corrector_id: correctorId,
                                correction: correctionStatus
                            });
                        } else {
                            resultsCreate.push({
                                question_id: qstId,
                                answer_id: ansId,
                                score: stringJson,
                                comment: correctorComents,
                                corrector_id: correctorId,
                                correction: correctionStatus
                            });
                            totalCreated++;
                        }
                    } else {
                        alert("Failed to serialize JSON data. Please retry again and contact system manager if problem persists.");
                        return;
                    }

                    if (correctionStatus !== 'partial') {
                        $(saveResultBtn).closest('.q-body').parent().find('.not-corrected').hide('500');
                        $(saveResultBtn).closest('.q-body').css('background-color', '#fff');
                    }
                    if (correctionStatus !== '') {
                        $(saveResultBtn).closest('div[correction]').attr('correction', correctionStatus);
                    }
                    if (correctionStatus === 'completed') {
                        if ($('.hide-completed').is(':checked')) {
                            $(saveResultBtn).closest('div[correction]').hide(500);
                        }
                    }
                });

                // 
                // Send AJAX request to create student's score:
                //                 
                if (resultsCreate.length) {
                    ajax(
                            baseURL + 'ajax/core/corrector/result/create',
                            JSON.stringify(resultsCreate),
                            function (rData) {
                                if (totalCreated > 1) {
                                    jQuery.each(rData, function (i, e) {

                                        $('input[ans-id="' + e.answer_id + '"]').attr('res-id', e.id);

                                        var tScore = 0;
                                        $.each(jQuery.parseJSON(e.score), function (j, sc) {
                                            tScore = tScore + sc.parsefloat();
                                        });

                                        $('a[ans-id="' + e.answer_id + '"]').parent().removeClass('nc').addClass('ac');
                                        $('a[ans-id="' + e.answer_id + '"]').html(tScore.floatval());

                                    });
                                } else {
                                    $('input[ans-id="' + rData.answer_id + '"]').attr('res-id', rData.id);

                                    var tScore = 0;
                                    $.each(jQuery.parseJSON(rData.score), function (j, sc) {
                                        tScore = tScore + sc.parsefloat();
                                    });

                                    $('a[ans-id="' + rData.answer_id + '"]').parent().removeClass('nc').addClass('ac');
                                    $('a[ans-id="' + rData.answer_id + '"]').html(tScore.floatval());

                                    resyncableResults = jQuery.grep(resyncableResults, function (value) {
                                        return value !== rData.answer_id;
                                    });
                                }
                            }
                    );
                }

                // 
                // Send AJAX request to update student's score:
                // 
                if (resultsUpdate.length) {
                    ajax(
                            baseURL + 'ajax/core/corrector/result/update',
                            JSON.stringify(resultsUpdate),
                            function (rData) {
                                resyncableResults = jQuery.grep(resyncableResults, function (value) {
                                    return value !== rData.answer_id;
                                });

                                $.each(resultsUpdate, function (i, rec) {

                                    var tScore = 0;
                                    $.each(jQuery.parseJSON(rec.score), function (j, sc) {
                                        tScore = tScore + sc.parsefloat();
                                    });

                                    if (tScore < 0) {
                                        tScore = 0;
                                    }

                                    $('a[ans-id="' + rec.answer_id + '"]').html(tScore.floatval());

                                    if (rec.correction === 'waiting' || rec.correction === 'partial') {
                                        $('a[ans-id="' + rec.answer_id + '"]').parent().removeClass('ac').addClass('nc');
                                    }
                                    if (rec.correction === 'completed' || rec.correction === 'finalized') {
                                        $('a[ans-id="' + rec.answer_id + '"]').parent().removeClass('nc').addClass('ac');
                                    }
                                });
                            }
                    );
                }

            };
        });

</script>
